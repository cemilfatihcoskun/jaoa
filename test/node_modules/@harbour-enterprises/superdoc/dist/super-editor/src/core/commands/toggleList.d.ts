/**
 * Find the nearest list node at the given position.
 * @param {import("prosemirror-model").ResolvedPos} $pos
 * @param {import("prosemirror-model").NodeType} OrderedType
 * @param {import("prosemirror-model").NodeType} BulletType
 * @returns {{ node: import("prosemirror-model").Node, pos: number, depth: number } | null}
 */
export function nearestListAt($pos: import("prosemirror-model").ResolvedPos, OrderedType: import("prosemirror-model").NodeType, BulletType: import("prosemirror-model").NodeType): {
    node: import("prosemirror-model").Node;
    pos: number;
    depth: number;
} | null;
/**
 * Collect all top-level list nodes that intersect with the given selection.
 * @param {Object} param0
 * @param {import("prosemirror-model").Node} param0.doc
 * @param {import("prosemirror-state").Selection} param0.selection
 * @param {import("prosemirror-model").NodeType} param0.OrderedType
 * @param {import("prosemirror-model").NodeType} param0.BulletType
 * @returns {Array<{ node: import("prosemirror-model").Node, pos: number, depth: number | null }>}
 */
export function collectIntersectingTopLists({ doc, selection, OrderedType, BulletType }: {
    doc: import("prosemirror-model").Node;
    selection: import("prosemirror-state").Selection;
    OrderedType: import("prosemirror-model").NodeType;
    BulletType: import("prosemirror-model").NodeType;
}): Array<{
    node: import("prosemirror-model").Node;
    pos: number;
    depth: number | null;
}>;
/**
 * Rebuild a list node with a new numbering scheme.
 * Preserves full item content and merges original attrs (run/paragraph props),
 * then overrides numbering-related fields for both ordered and bullet lists.
 * @param {Object} param0
 * @param {import("prosemirror-model").Node} param0.oldList
 * @param {import("prosemirror-model").NodeType} param0.toType
 * @param {import("../Editor.js").Editor} param0.editor
 * @param {import("prosemirror-model").Schema} param0.schema
 * @param {String|null} param0.fixedNumId
 * @returns {import("prosemirror-model").Node}
 */
export function rebuildListNodeWithNewNum({ oldList, toType, editor, schema, fixedNumId }: {
    oldList: import("prosemirror-model").Node;
    toType: import("prosemirror-model").NodeType;
    editor: import("../Editor.js").Editor;
    schema: import("prosemirror-model").Schema;
    fixedNumId: string | null;
}): import("prosemirror-model").Node;
/**
 * Set the selection span in the transaction to match the original span.
 * @param {import("prosemirror-state").Transaction} tr
 * @param {number} fromBefore
 * @param {number} toBefore
 */
export function setMappedSelectionSpan(tr: import("prosemirror-state").Transaction, fromBefore: number, toBefore: number): void;
export function toggleList(listType: string | import("prosemirror-model").NodeType): Function;
